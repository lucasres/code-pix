// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PixeServiceClient is the client API for PixeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PixeServiceClient interface {
	RegisterPixKey(ctx context.Context, in *PixKeyRegistration, opts ...grpc.CallOption) (*PixKeyCreateResult, error)
	Find(ctx context.Context, in *PixKey, opts ...grpc.CallOption) (*PixKeyInfo, error)
}

type pixeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPixeServiceClient(cc grpc.ClientConnInterface) PixeServiceClient {
	return &pixeServiceClient{cc}
}

func (c *pixeServiceClient) RegisterPixKey(ctx context.Context, in *PixKeyRegistration, opts ...grpc.CallOption) (*PixKeyCreateResult, error) {
	out := new(PixKeyCreateResult)
	err := c.cc.Invoke(ctx, "/github.com.lucasres.code.pix.PixeService/RegisterPixKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixeServiceClient) Find(ctx context.Context, in *PixKey, opts ...grpc.CallOption) (*PixKeyInfo, error) {
	out := new(PixKeyInfo)
	err := c.cc.Invoke(ctx, "/github.com.lucasres.code.pix.PixeService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PixeServiceServer is the server API for PixeService service.
// All implementations must embed UnimplementedPixeServiceServer
// for forward compatibility
type PixeServiceServer interface {
	RegisterPixKey(context.Context, *PixKeyRegistration) (*PixKeyCreateResult, error)
	Find(context.Context, *PixKey) (*PixKeyInfo, error)
	mustEmbedUnimplementedPixeServiceServer()
}

// UnimplementedPixeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPixeServiceServer struct {
}

func (UnimplementedPixeServiceServer) RegisterPixKey(context.Context, *PixKeyRegistration) (*PixKeyCreateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPixKey not implemented")
}
func (UnimplementedPixeServiceServer) Find(context.Context, *PixKey) (*PixKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedPixeServiceServer) mustEmbedUnimplementedPixeServiceServer() {}

// UnsafePixeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PixeServiceServer will
// result in compilation errors.
type UnsafePixeServiceServer interface {
	mustEmbedUnimplementedPixeServiceServer()
}

func RegisterPixeServiceServer(s grpc.ServiceRegistrar, srv PixeServiceServer) {
	s.RegisterService(&PixeService_ServiceDesc, srv)
}

func _PixeService_RegisterPixKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixKeyRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixeServiceServer).RegisterPixKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.lucasres.code.pix.PixeService/RegisterPixKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixeServiceServer).RegisterPixKey(ctx, req.(*PixKeyRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixeService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixeServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.lucasres.code.pix.PixeService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixeServiceServer).Find(ctx, req.(*PixKey))
	}
	return interceptor(ctx, in, info, handler)
}

// PixeService_ServiceDesc is the grpc.ServiceDesc for PixeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PixeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.lucasres.code.pix.PixeService",
	HandlerType: (*PixeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPixKey",
			Handler:    _PixeService_RegisterPixKey_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _PixeService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pixkey.proto",
}
